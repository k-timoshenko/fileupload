<?php

namespace tkanstantsin\fileupload\config;

use tkanstantsin\fileupload\model\IFile;
use tkanstantsin\fileupload\model\Type;

/**
 * Class Alias represent config for model
 * @todo: add `accept` type.
 */
class Alias
{
    public const DEFAULT_MAX_SIZE = 5 * 1000 * 1000; // 5 MB
    public const DEFAULT_MAX_COUNT = 5;
    public const DEFAULT_HASH_LENGTH = 3;
    /**
     * @see hash_algos()
     */
    public const DEFAULT_HASH_METHOD = 'crc32'; // not crypto-strong, but fast (as needed)

    /**
     * Alias name
     * @var string
     */
    public $name;

    /**
     * Owner model class
     * @var string
     */
    public $class;
    /**
     * @var string
     */
    public $directory;

    /**
     * Max file size in bytes
     * @var int
     */
    public $maxSize;
    /**
     * Max file count
     * @var int
     */
    public $maxCount;
    /**
     * Whether it is allowed multiple files for one model
     * @var bool
     */
    public $multiple;

    /**
     * Hash method like crc32 or md5
     * @var string
     */
    public $hashMethod;
    /**
     * Length of hash generated by hash method
     * @var int
     */
    public $cacheHashLength;

    /**
     * @var callable
     */
    public $filePathClosure;
    /**
     * @var callable
     */
    public $assetNameClosure;


    /**
     * Alias constructor.
     * @param array $config
     * @throws \ErrorException
     */
    public function __construct(array $config = [])
    {
        foreach ($config as $key => $value) {
            $this->$key = $value;
        }

        if (!\is_int($this->maxSize) || $this->maxSize <= 0) {
            throw new \ErrorException(sprintf('Maximum file size must be positive integer but `%s` got.', $this->maxSize));
        }
        if (!\is_int($this->maxCount) || $this->maxCount <= 0) {
            throw new \ErrorException(sprintf('Maximum file count must be positive integer but `%s` got.', $this->maxCount));
        }
        if (!\in_array($this->hashMethod, hash_algos(), true)) {
            throw new \ErrorException(sprintf('Hash method `%s` not found.', $this->hashMethod));
        }
        // TODO: create interface with all such methods.
        // Implement base version. And allow to use custom realizations.
        if ($this->filePathClosure !== null && !\is_callable($this->filePathClosure)) {
            throw new \ErrorException('FilePathClosure must be callable.');
        }
        if ($this->assetNameClosure !== null && !\is_callable($this->assetNameClosure)) {
            throw new \ErrorException('AssetNameClosure must be callable.');
        }
    }

    /**
     * Returns file path in contentFS
     * @param IFile $file
     * @return string|null
     */
    public function getFilePath(IFile $file): ?string
    {
        if ($this->filePathClosure !== null) {
            return \call_user_func($this->filePathClosure, $file);
        }

        return $file->getId() !== null
            ? $this->getFileDirectory($file) . DIRECTORY_SEPARATOR . $this->getFileName($file)
            : null;
    }

    /**
     * Returns path for caching files.
     *
     * @param IFile  $file
     * @param string $formatName
     *
     * @return string
     */
    public function getCachePath(IFile $file, string $formatName): string
    {
        return implode('/', array_filter([
            Type::$folderPrefix[$file->getType()] . '_' . $formatName,
            mb_substr($file->getHash(), 0, $this->cacheHashLength),
            $this->getAssetName($file),
        ]));
    }

    /**
     * @param IFile $file
     * @return string
     */
    public function getAssetName(IFile $file): string
    {
        if ($this->assetNameClosure !== null) {
            return \call_user_func($this->assetNameClosure, $file);
        }

        return $file->getId() . '_' . $file->getFullName();
    }

    /**
     * @param IFile $file
     * @return string
     */
    public function getFileName(IFile $file): string
    {
        return $file->getId() . ($file->getExtension() !== null ? '.' . $file->getExtension() : '');
    }

    /**
     * Returns target directory for uploaded file
     * @param IFile $file
     * @return string
     */
    public function getFileDirectory(IFile $file): string
    {
        return implode(DIRECTORY_SEPARATOR, array_filter([
            $this->directory,
            // TODO: check if used correct hash.
            // Which value should be passed into getDirectoryHash? Directory name or file id?
            $this->getDirectoryHash((string) $file->getId()),
        ]));
    }

    /**
     * @param string $value E.g. directory name
     * @return string
     */
    protected function getDirectoryHash(string $value): ?string
    {
        return $this->cacheHashLength > 0
            ? mb_substr(hash($this->hashMethod, $value), 0, $this->cacheHashLength)
            : null;
    }
}